from Post.serializers import UserSerializer
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import FriendRequest
from .serializers import FriendRequestSerializer
from django.contrib.auth.models import User


@api_view(['GET', 'POST'])
def friend_list(request):
    """
    List all code snippets, or create a new snippet.
    """
    if request.method == 'GET':
        user=request.user.pk
        q1=FriendRequest.objects.filter(request_from=user,status='Accepted')
        q2=FriendRequest.objects.filter(request_to=user,status='Accepted')
        if len(q1) == 0 and len(q2) == 0:
            search_fields=[]
        elif len(q1) != 0 and len(q2) == 0:
            request_to_user=q1.values()[0]['request_to_id']
            search_fields=[request_to_user]
        elif len(q1) == 0 and len(q2) != 0:
            request_from_user=q2.values()[0]['request_from_id']
            search_fields=[request_from_user]
        else:
            request_to_user=q1.values()[0]['request_to_id']
            request_from_user=q2.values()[0]['request_from_id']
            search_fields=[request_to_user,request_from_user]
        friends=User.objects.filter(id__in=search_fields).values()
        serializer = UserSerializer(friends, many=True)
        return Response(serializer.data)

    elif request.method == 'POST':
        serializer = FriendRequestSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET', 'PUT', 'DELETE'])
def friend_detail(request, pk):
    """
    Retrieve, update or delete a code snippet.
    """
    try:
        friend= FriendRequest.objects.filter(request_from=request.user.pk,request_to=pk)
    except FriendRequest.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        if len(friend) != 0: 
            friend_id=friend.values()[0]['request_to_id']
            user_friend=User.objects.get(pk=friend_id)
            serializer = UserSerializer(user_friend)
            return Response(serializer.data)
        else:
            return Response({"message":"You have no friends"})
    elif request.method == 'PUT':
        serializer = FriendRequestSerializer(friend, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        friend.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)